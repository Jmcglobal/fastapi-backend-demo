name: Backend CI - and Testing

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: backend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3


      - name: Set up python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set Image Tag
        id: tag_image
        run: |
          echo "IMAGE_TAG=$(date +%Y-%m-%d-%H-%M)-${GITHUB_SHA::4}" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(date +%Y-%m-%d-%H-%M)-${GITHUB_SHA::4}" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Save Docker Image
        run: |
          docker save $IMAGE_NAME:$IMAGE_TAG -o  /tmp/backend.tar.gz
      - name: Upload Docker Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: /tmp/backend.tar.gz
          retention-days: 1

  test:
    name: Test Docker Image
    needs: build
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
      IMAGE_NAME: backend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: /tmp

      - name: Load Docker Image
        run: |
          docker load -i /tmp/backend.tar.gz

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      # - name: Download environment file from S3
      #   run: |
      #     aws s3 cp s3://fastapi-storage/environment .env
      #     echo "Environment file downloaded successfully"
      
      - name: Update docker-compose with latest image
        run: |
          sed -i "39 s|image:.*|image: ${IMAGE_NAME}:${IMAGE_TAG}|" docker-compose.yml
          echo "Docker compose file updated:"
          cat docker-compose.yml

      - name: Start services with docker-compose
        run: |
          docker-compose up -d
          echo "Docker compose started in detached mode"
          sleep 60

      - name: Check docker-compose logs
        run: |
          echo "=== Docker Compose Logs ==="
          docker-compose logs
          echo "============================="
          docker ps -a
          docker-compose down -v
      